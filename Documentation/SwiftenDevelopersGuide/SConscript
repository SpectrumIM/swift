Import("env")

env.Tool("DocBook", toolpath = ["#/BuildTools/DocBook/SCons"])

################################################################################
# Code generation helper
################################################################################

import sys, re, os.path

def generateDocBookCode(env, target, source) :
    # Parse program
    filename = source[0].abspath
    filenameBase = os.path.basename(filename).replace(".cpp", "")
    inputfile = open(filename)
    program = ""
    programs = {}
    programName = ""
    inEllipsis = False
    for line in inputfile.readlines() :
        if inEllipsis :
            if "//..." in line :
                inEllipsis = False
        else :
            if line.startswith("/*") or line.startswith(" *") :
                continue
            if "//..." in line :
                inEllipsis = True
                line = line.replace("//...", "]]>&#x2026;<![CDATA[")
            else :
                m = re.match("^/// (.*)", line)
                if m :
                    if programName :
                        programs[programName] = program
                    program = ""
                    programName = m.group(1).strip().replace(" ", "")
                    continue
            line = re.sub("\t", "  ", line)
            program += line
    programs[programName] = program
    inputfile.close()

    for programName, program in programs.items() :
        document = "<foo><programlisting><![CDATA[" + program.strip() + "]]></programlisting></foo>"

        # Generate code
        output = open(target[0].abspath, 'w')
        output.write(document)
        output.close()

################################################################################

if "doc" in ARGUMENTS :
    env.DocBook("Swiften Developers Guide.xml")

sources = []
for i in range(1, 7) :
    sources.append("Examples/EchoBot/EchoBot" + str(i) + ".cpp")
sources.append("Examples/EchoBot/EchoBot0x.cpp")
sources += ["Examples/EchoBot/" + i for i in ["EchoPayloadParserFactory.h", "EchoPayloadSerializer.h", "EchoPayload.h", "EchoComponent.cpp"]]
for source in sources :
    env.Command(source + ".xml", source, Action(generateDocBookCode, cmdstr = "$GENCOMSTR"))

SConscript(dirs = ["Examples"])
